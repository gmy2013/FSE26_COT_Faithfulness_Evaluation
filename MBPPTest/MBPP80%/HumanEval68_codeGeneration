CodeGeneration:
address".
   - If no match is found (falsy), it returns "Invalid IP address".

4. **Edge Cases**: The regex handles:
   - Numbers from 0-255 in each octet.
   - Disallows leading zeros (e.g., "01" is invalid unless it's "0" or part of a number like "10").
   - Ensures exactly four octets separated by dots.

5. **Return**: The function returns a string indicating validity.

Here is the complete function with the docstring:

```python
import re

regex = r'^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'

def check_IP(Ip):
    """
    Validate an IPv4 address string.
    
    Args:
        Ip (str): The IP address string to validate.
        
    Returns:
        str: "Valid IP address" if the input matches IPv4 format with each octet between 0-255,
             "Invalid IP address" otherwise.
             
    Examples:
        >>> check_IP("192.168.1.1")
        'Valid IP address'
        >>> check_IP("256.1.1.1")
        'Invalid IP address'
        >>> check_IP("192.168.01.1")
        'Invalid IP address'
    """
    if re.search(regex, Ip):
        return "Valid IP address"
    else:
        return "Invalid IP address"
```

Note: I formatted the regex string to remove the line breaks and extra spaces for better readability while maintaining the same pattern. The raw string prefix `r` is used to handle backslashes properly in regex patterns.
