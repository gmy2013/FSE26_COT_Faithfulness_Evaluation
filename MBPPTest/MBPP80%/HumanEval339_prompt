def heap_sort(arr):
    heapify(arr)  
    end = len(arr) - 1
    while end > 0:
        arr[end], arr[0] = arr[0], arr[end]
        shift_down(arr, 0, end - 1)
        end -= 1
    return arr

def heapify(arr):
    start = len(arr) // 2
    while start >= 0:
        shift_down(arr, start, len(arr) - 1)
        start -= 1
def shift_down(arr, start, end):
    root = start
    while root * 2 + 1 <= end:
        child = root * 2 + 1
        if child + 1 <= end and arr[child] < arr[child + 1]:
            child += 1
        if child <= end and arr[root] < arr[child]:
            arr[root], arr[child] = arr[child], arr[root]
            root = child
        else:
            return

The following is chain of thought:
1. **Understanding the heap_sort function**: 
   - First, it calls `heapify` to convert the input array into a max-heap.
   - Then, it initializes `end` to the last index of the array.
   - It enters a loop that continues until `end` is 0 (meaning the entire array is sorted).
   - In each iteration, it swaps the root (largest element) with the element at `end`, effectively placing the largest element at its correct sorted position.
   - It calls `shift_down` on the new root to restore the max-heap property in the unsorted portion (from index 0 to `end-1`).
   - Decrements `end` to reduce the unsorted portion by one.
   - Finally, returns the sorted array.

2. **Understanding the heapify function**:
   - It starts from the last non-leaf node (index `len(arr)//2`) and moves backwards to the root.
   - For each node, it calls `shift_down` to ensure the subtree rooted at that node satisfies the max-heap property.

3. **Understanding the shift_down function**:
   - It takes a node `start` and ensures the max-heap property is maintained from that node down to `end`.
   - It calculates the left child of the root.
   - If the right child exists and is larger than the left child, it chooses the right child.
   - If the chosen child is larger than the root, it swaps them and moves the root down to the child's position.
   - Continues until the root is larger than its