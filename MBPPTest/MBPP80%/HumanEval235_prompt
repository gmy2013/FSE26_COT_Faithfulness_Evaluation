from sys import maxsize 
def max_sub_array_sum(a,size): 
	max_so_far = -maxsize - 1
	max_ending_here = 0
	start = 0
	end = 0
	s = 0
	for i in range(0,size): 
		max_ending_here += a[i] 
		if max_so_far < max_ending_here: 
			max_so_far = max_ending_here 
			start = s 
			end = i 
		if max_ending_here < 0: 
			max_ending_here = 0
			s = i+1
	return (end - start + 1)
The following is chain of thought:
1. The function `max_sub_array_sum` implements Kadane's algorithm to find the maximum subarray sum.
2. However, the return statement `return (end - start + 1)` suggests it returns the length of the maximum subarray, not the sum.
3. The algorithm tracks:
   - `max_so_far`: maximum sum found so far
   - `max_ending_here`: current running sum
   - `start` and `end`: indices of the maximum subarray
   - `s`: temporary start index
4. For each element:
   - Add it to `max_ending_here`
   - Update `max_so_far`, `start`, and `end` if current sum is better
   - Reset `max_ending_here` and update `s` if current sum becomes negative
5. The return 