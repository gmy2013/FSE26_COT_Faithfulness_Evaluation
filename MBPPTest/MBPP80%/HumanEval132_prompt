def find_first_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result
The following is chain of thought:
1. Initialize `left` to 0 and `right` to the last index of the array.
2. Initialize `result` to -1 to handle the case where the element is not found.
3. Use a while loop to continue searching while `left` <= `right`.
4. Calculate the middle index `mid` using integer division.
5. If the middle element equals `x`:
   - Update `result` to `mid` to record this occurrence.
   - Move `right` to `mid - 1` to search for an earlier occurrence in the left half.
6. If `x` is less than the middle element, search the left half by setting `right` to `mid - 1`.
7. If `x` is greater than the middle element