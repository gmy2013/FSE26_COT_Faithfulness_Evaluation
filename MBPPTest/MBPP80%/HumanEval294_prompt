def max_sum_subseq(A):
    n = len(A)
    if n == 1:
        return A[0]
    look_up = [None] * n
    look_up[0] = A[0]
    look_up[1] = max(A[0], A[1])
    for i in range(2, n):
        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])
        look_up[i] = max(look_up[i], A[i])
    return look_up[n - 1]
The following is chain of thought:
1. **Understand the problem**: The function `max_sum_subseq` computes the maximum sum of a subsequence where no two elements are adjacent (non-adjacent subsequence).
2. **Base cases handling**:
   - If the list has only one element (`n == 1`), return that element.
   - Initialize a DP table `look_up` of length `n`.
   - Set `look_up[0] = A[0]` (only one element).
   - Set `look_up[1] = max(A[0], A[1])` (choose the larger of the first two).
3. **DP recurrence for `i >= 2`**:
   - `look_up[i]` is the maximum of:
        a) The value at `i-1` (excluding current element).
        b) The value at `i-2` plus `A[i]` (including current element, skipping adjacent).
        c) The 