import math 
def count_Divisors(n) : 
    count = 0
    for i in range(1, (int)(math.sqrt(n)) + 2) : 
        if (n % i == 0) : 
            if( n // i == i) : 
                count = count + 1
            else : 
                count = count + 2
    if (count % 2 == 0) : 
        return ("Even") 
    else : 
        return ("Odd") 
The following is chain of thought:
1. **Understand the problem**: The function determines whether the number of divisors of `n` is even or odd.
2. **Key insight**: The number of divisors is odd if and only if `n` is a perfect square (because divisors come in pairs except when `i = sqrt(n)`).
3. **Check for perfect square**: Instead of counting all divisors, we can directly check if `n` is a perfect square.
4. **Optimize**: If `n` is a perfect square, return "Odd"; otherwise, return "Even".
5. **Implement**: Use `math.isqrt(n)` to get the integer square root and check if squaring it gives `n`.

Here is the optimized code:

``