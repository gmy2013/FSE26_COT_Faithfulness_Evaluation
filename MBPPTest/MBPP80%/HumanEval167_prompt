def check_Odd_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 1): 
        return True
    else: 
        return False
The following is chain of thought:
Here's the structured chain of thought for the given function:

1. **Function Purpose**: The function checks if a number has odd parity (odd number of 1-bits in its binary representation)

2. **Initialization**: 
   - Start with `parity = 0` to count the number of 1-bits
   - Use a while loop that continues until `x` becomes 0

3. **Bit Counting Technique**:
   - `x = x & (x - 1)` is a clever bit manipulation trick that clears the least significant set bit (1-bit)
   - Each iteration removes one 1-bit from the number
   - `parity += 1` increments the counter for each 1-bit found

4. **Parity Check**:
   - After counting all 1-bits, check if the count is odd (`parity % 2 == 1`)
   - Return `True` for odd parity, `False` for even parity

5. **Time 