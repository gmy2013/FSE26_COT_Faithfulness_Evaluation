def get_median(arr1, arr2, n):
  i = 0
  j = 0
  m1 = -1
  m2 = -1
  count = 0
  while count < n + 1:
    count += 1
    if i == n:
      m1 = m2
      m2 = arr2[0]
      break
    elif j == n:
      m1 = m2
      m2 = arr1[0]
      break
    if arr1[i] <= arr2[j]:
      m1 = m2
      m2 = arr1[i]
      i += 1
    else:
      m1 = m2
      m2 = arr2[j]
      j += 1
  return (m1 + m2)/2
The following is chain of thought:
Here's the structured chain of thought for the given function:

1. **Function Purpose**: This function calculates the median of two sorted arrays of equal length n by merging them in a single pass

2. **Initialization**:
   - Initialize two pointers `i` and `j` to track positions in arr1 and arr2 respectively
   - Initialize `m1` and `m2` to track the two middle values needed for median calculation
   - Initialize `count` to track the number of elements processed

3. **Merging Loop**:
   - Loop until we process n+1 elements (to reach the middle two elements)
   - Handle edge cases where one array is exhausted:
     - If arr1 is exhausted, take next element from arr2
     - If arr2 is exhausted, take next element from arr1
   - Compare current elements from both arrays and take the smaller one
   - Update m1 to previous m2, and m2 to current element

4. **Median Calculation**:
   - After processing n+1 elements, we have the two middle values
   - Return t