CodeGeneration:
h from (0,0) to (N-1,N-1) is (2*N - 1) steps.
8. Return the maximum average by dividing the maximum path sum by the path length.

Here's the complete function:

```python
M = 100

def maxAverageOfPath(cost, N):
    """
    Compute the maximum average value of a path from top-left to bottom-right
    in an N x N cost matrix.
    
    Args:
        cost: 2D list of integers representing the cost matrix
        N: integer representing the size of the matrix (N x N)
    
    Returns:
        float: maximum average value of the path
    """
    dp = [[0 for i in range(N + 1)] for j in range(N + 1)]
    dp[0][0] = cost[0][0]
    
    # Fill first column
    for i in range(1, N):
        dp[i][0] = dp[i - 1][0] + cost[i][0]
    
    # Fill first row
    for j in range(1, N):
        dp[0][j] = dp[0][j - 1] + cost[0][j]
    
    # Fill remaining cells
    for i in range(1, N):
        for j in range(1, N):
            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]
    
    # Calculate maximum average
    path_length = 2 * N - 1
    return dp[N - 1][N - 1] / path_length
```
