CodeGeneration:
] + 2 * dp[i-2]` to compute each Jacobsthal number.
4. Finally, return `dp[n]` which is the n-th Jacobsthal number.

Here is the complete function:

```python
def jacobsthal_num(n):
    """
    Compute the n-th Jacobsthal number using dynamic programming.
    
    The Jacobsthal numbers are defined by the recurrence relation:
    J(0) = 0, J(1) = 1, and J(n) = J(n-1) + 2*J(n-2) for n >= 2.
    
    Args:
        n (int): The index of the Jacobsthal number to compute (n >= 0)
    
    Returns:
        int: The n-th Jacobsthal number
    
    Examples:
        >>> jacobsthal_num(0)
        0
        >>> jacobsthal_num(1)
        1
        >>> jacobsthal_num(5)
        11
    """
    if n == 0:
        return 0
    if n == 1:
        return 1
    
    dp = [0] * (n + 1)
    dp[0] = 0
    dp[1] = 1
    
    for i in range(2, n + 1):
        dp[i] = dp[i - 1] + 2 * dp[i - 2]
    
    return dp[n]
```

Note: I added explicit base case handling for n=0 and n=1 at the beginning to handle edge cases more efficiently and avoid creating an array when n is small.
