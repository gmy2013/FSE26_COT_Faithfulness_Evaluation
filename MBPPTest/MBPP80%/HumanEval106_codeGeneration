CodeGeneration:
Based on the chain of thought provided, here's the complete function with improved code style and comments:

```python
def count_Set_Bits(n):
    """
    Count the total number of set bits (1s) in the binary representations 
    of all numbers from 0 to n.
    
    Args:
        n (int): The upper bound (inclusive) of numbers to consider
        
    Returns:
        int: Total count of set bits from 0 to n
    """
    n += 1  # Include 0 in the count
    powerOf2 = 2  # Start with the first bit position (2^1)
    cnt = n // 2  # Each odd number contributes 1 in the LSB
    
    # Process each bit position from LSB to MSB
    while powerOf2 <= n:
        # Calculate number of complete pairs for this bit position
        totalPairs = n // powerOf2
        
        # Add contribution from complete pairs
        cnt += (totalPairs // 2) * powerOf2
        
        # Handle remaining numbers if there's an odd number of pairs
        if totalPairs & 1:
            cnt += n % powerOf2
        
        # Move to the next higher bit position
        powerOf2 <<= 1
    
    return cnt
```

The function efficiently counts set bits by processing each bit position separately, leveraging the pattern that each bit position alternates between 0 and 1 in a predictable way across the number range.
