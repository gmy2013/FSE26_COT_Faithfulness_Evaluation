def Odd_Length_Sum(arr):
    Sum = 0
    l = len(arr)
    for i in range(l):
        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])
    return Sum
The following is chain of thought:
Here is the structured chain of thought for the Odd_Length_Sum function:

1. **Function Purpose Analysis**: The function calculates the sum of all elements in subarrays of odd length, weighted by how many times each element appears in such subarrays.

2. **Key Insight**: For each element at index i, we need to count how many odd-length subarrays include this element.

3. **Subarray Counting Logic**:
   - Total subarrays containing arr[i] = (number of starting indices) × (number of ending indices)
   - Starting indices possible: i + 1 (indices 0 to i)
   - Ending indices possible: l - i (indices i to l-1)
   - Total subarrays containing arr[i] = (i + 1) × (l - i)

4. **Odd-Length Filtering**:
   - Approximately half of these subarrays will have odd length
   - The exact formula: number of odd-length subarrays containing arr[i] = ⌈((i + 1) × (l - i)) / 2⌉
   - Using integer arithmetic: ((i + 1) × (l - i) + 1) // 2

5. **Weighted Sum Calculation**:
   - For each element arr[i], multiply by its occurrence count in odd-length subarrays
   - Sum these weighted contributions across all indices

6. **Implementation Verification**:
   - The formula correctly handles both even and odd array lengths
   - The +1 and inte