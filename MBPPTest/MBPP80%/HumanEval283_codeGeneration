CodeGeneration:
```python
def all_Bits_Set_In_The_Given_Range(n, l, r):
    """
    Check if all bits in the range [l, r] (1-indexed from right) of integer n are set to 1.
    
    Args:
        n (int): The integer to check
        l (int): Left boundary of the range (inclusive, 1-indexed from right)
        r (int): Right boundary of the range (inclusive, 1-indexed from right)
    
    Returns:
        bool: True if all bits in the range [l, r] are set, False otherwise
    
    Examples:
        >>> all_Bits_Set_In_The_Given_Range(15, 1, 3)  # 15 = 1111 in binary
        True
        >>> all_Bits_Set_In_The_Given_Range(10, 2, 3)  # 10 = 1010 in binary
        False
    """
    # Handle invalid range
    if l > r:
        return False
    
    # Create a bitmask with 1s in positions [l, r] (1-indexed from right)
    # (1 << r) - 1 creates a mask with 1s from position 1 to r
    # (1 << (l - 1)) - 1 creates a mask with 1s from position 1 to l-1
    # XOR them to get 1s only in positions [l, r]
    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)
    
    # Extract the bits of n in the specified range
    extracted_bits = n & mask
    
    # Check if the extracted bits match the mask (all bits are set)
    return mask == extracted_bits
```
