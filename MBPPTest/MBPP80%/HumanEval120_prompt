M = 100
def maxAverageOfPath(cost, N): 
	dp = [[0 for i in range(N + 1)] for j in range(N + 1)] 
	dp[0][0] = cost[0][0] 
	for i in range(1, N): 
		dp[i][0] = dp[i - 1][0] + cost[i][0] 
	for j in range(1, N): 
		dp[0][j] = dp[0][j - 1] + cost[0][j] 
	for i in range(1, N): 
		for j in range(1, N): 
			dp[i][j] = max(dp[i - 1][j], 
						dp[i][j - 1]) + cost[i][j] 
	return dp[N - 1][N - 1] / (2 * N - 1)
The following is chain of thought:
1. The function `maxAverageOfPath` computes the maximum average value of a path from top-left to bottom-right in an N x N cost matrix.
2. Initialize a DP table `dp` of size (N+1) x (N+1) with zeros to store cumulative path sums.
3. Set the starting point `dp[0][0]` to `cost[0][0]`.
4. Fill the first column: each cell `dp[i][0]` is the sum of the previous cell and the current cost.
5. Fill the first row: each cell `dp[0][j]` is the sum of the left cell and the current cost.
6. For inner cells, `dp[i][j]` is the maximum of the top or left cumulative sum plus the current cost.
7. The path lengt