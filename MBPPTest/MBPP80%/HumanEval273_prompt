def check_Concat(str1,str2):
    N = len(str1)
    M = len(str2)
    if (N % M != 0):
        return False
    for i in range(N):
        if (str1[i] != str2[i % M]):
            return False         
    return True
The following is chain of thought:
Here's the structured chain of thought for the `check_Concat` function:

1. **Function Purpose Analysis**: The function checks if `str1` can be formed by concatenating multiple copies of `str2`

2. **Length Compatibility Check**: 
   - Calculate lengths of both strings (N for str1, M for str2)
   - If N is not divisible by M, str1 cannot be formed by concatenating str2
   - Return False immediately if this condition fails

3. **Character-by-Character Verification**:
   - Iterate through each character in str1 using index i
   - For each position i in str1, check if it matches the corresponding character in str2
   - Use modulo operation (i % M) to cycle through str2 characters repeatedly
   - If any character mismatch is found, return False immediately

4. **Success Condition**:
   - If all characters pass the verification, return True
   - This means str1 consists of exact repetitions of str2

5. **Edge Case Handling**:
   - Empty strings: If str2 is empty (M=0), the modulo operation would cause division by zero
   - How