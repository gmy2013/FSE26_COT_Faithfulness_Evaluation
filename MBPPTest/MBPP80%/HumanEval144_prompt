def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]
The following is chain of thought:
1. **Understand the function purpose**: Generate numbers in a range where every digit divides the number (with no zero digits).
2. **Iterate through range**: Use list comprehension to check each number from `startnum` to `endnum`.
3. **Convert number to string**: To access each digit individually.
4. **Check each digit**:
   - Skip if digit is '0' (to avoid division by zero).
   - Check if the number is divisible by the digit (as integer).
5. **Use `any` with negation**: The condition requires that no digit fails the check (i.e., all digits must divide the number).
6. **Return the list**: Collect all numbers that satisfy the condition.

The cod