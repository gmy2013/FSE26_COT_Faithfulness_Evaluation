def unique_sublists(list1):
    result ={}
    for l in list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result
The following is chain of thought:
1. The function `unique_sublists` takes a list of lists (`list1`) as input.
2. Initialize an empty dictionary `result` to store the counts.
3. Iterate over each sublist `l` in `list1`:
   - Convert the sublist `l` to a tuple (since lists are unhashable and cannot be dictionary keys).
   - Use `setdefault` to either get the existing list for that tuple key or create a new empty list if the key doesn't exist.
   - Append `1` to that list (each occurrence adds a 1 to the list of counts for that sublist).
4. After processing all sublists, iterate over the dictionary items (keys and values):
   - For each key `a` (the tuple) and value `b` (the list of 1s), replace the value with the sum of the list (which gives the count of occurrences).
5. Return the dictionary with tuples of the original 