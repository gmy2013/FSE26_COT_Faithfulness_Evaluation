def find_Sum(arr,n): 
    arr.sort() 
    sum = arr[0] 
    for i in range(0,n-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum
The following is chain of thought:
Here is the structured chain of thought for the given function:

1. **Function Purpose Analysis**: The function `find_Sum` takes an array `arr` and integer `n` (presumably the length of `arr`). It aims to compute the sum of distinct elements in the array.

2. **Initial Operation**: The array is sorted in ascending order using `arr.sort()`. This groups duplicate values together, which is essential for the distinct element check.

3. **Sum Initialization**: The variable `sum` is initialized to the first element of the sorted array (`arr[0]`). This ensures the first distinct element is included.

4. **Iteration Through Array**: A loop runs from index `0` to `n-2` (i.e., `range(0, n-1)`). This allows comparison of each element with its immediate next element.

5. **Distinct Element Check**: Inside the loop, it checks if the current element `arr[i]` is not equal to the next element `arr[i+1]`. If they are different, it means `arr[i+1]` is distinct from the previous value.

6. **Sum Update**: When a distinct element is found (i.e., `arr[i] != arr[i+1]`), the value of `arr[i+1]` is added to `sum`. This accumulates the sum of all distinct elements.

7. **Return Result**: After processing all elements, the total sum of distinct values is returned.

8. **Edge Consideration**: The function handles the case where all elements are distinct by including every element. If