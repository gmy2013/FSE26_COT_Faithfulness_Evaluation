CodeGeneration:
ak condition when current exceeds nÂ²
5. **Four Directional Filling**:
   - Right: Fill top row from left to right
   - Down: Fill right column from top to bottom
   - Left: Fill bottom row from right to left
   - Up: Fill left column from bottom to top
6. **Boundary Adjustment**: After each direction, adjust the corresponding boundary inward
7. **Termination**: Break loop when all cells are filled (current > n*n)

Here's the complete function with the chain of thought implemented:

```python
def generate_matrix(n):
    """
    Generate an n x n matrix filled with elements from 1 to n^2 in spiral order.
    
    Args:
        n (int): Size of the matrix (n x n)
    
    Returns:
        list: 2D list representing the spiral matrix, empty list if n <= 0
    
    Example:
        >>> generate_matrix(3)
        [[1, 2, 3], [8, 9, 4], [7, 6, 5]]
    """
    # Input validation
    if n <= 0:
        return []
    
    # Initialize n x n matrix with zeros
    matrix = [[0] * n for _ in range(n)]
    
    # Set initial boundaries
    row_start, row_end = 0, n - 1
    col_start, col_end = 0, n - 1
    current = 1
    
    # Spiral generation loop
    while True:
        if current > n * n:
            break
            
        # Fill top row from left to right
        for col in range(col_start, col_end + 1):
            matrix[row_start][col] = current
            current += 1
        row_start += 1
        
        if current > n * n:
            break
            
        # Fill right column from top to bottom
        for row in range(row_start, row_end + 1):
            matrix[row][col_end] = current
            current += 1
        col_end -= 1
        
        if current > n * n:
            break
            
        # Fill bottom row from right to left
        for col in range(col_end, col_start - 1, -1):
            matrix[row_end][col] = current
            current += 1
        row_end -= 1
        
        if current > n * n:
            break
            
        # Fill left column from bottom to top
        for row in range(row_end, row_start - 1, -1):
            matrix[row][col_start] = current
            current += 1
        col_start += 1
    
    return matrix
```
