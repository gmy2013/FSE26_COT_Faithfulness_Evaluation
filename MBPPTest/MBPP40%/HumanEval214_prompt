def sort_by_dnf(arr, n):
  low=0
  mid=0
  high=n-1
  while mid <= high:
    if arr[mid] == 0:
      arr[low], arr[mid] = arr[mid], arr[low]
      low = low + 1
      mid = mid + 1
    elif arr[mid] == 1:
      mid = mid + 1
    else:
      arr[mid], arr[high] = arr[high], arr[mid]
      high = high - 1
  return arr
The following is chain of thought:
Here's the structured chain of thought for the given function:

1. **Problem Analysis**: The function implements the Dutch National Flag (DNF) algorithm to sort an array containing only 0s, 1s, and 2s.

2. **Initialization**: 
   - `low` pointer tracks the boundary for 0s (starts at beginning)
   - `mid` pointer scans through the array (starts at beginning)
   - `high` pointer tracks the boundary for 2s (starts at end)

3. **Main Loop**: