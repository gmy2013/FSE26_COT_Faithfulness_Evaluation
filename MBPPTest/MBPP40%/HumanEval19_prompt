def largest_subset(a, n):
	dp = [0 for i in range(n)]
	dp[n - 1] = 1; 
	for i in range(n - 2, -1, -1):
		mxm = 0;
		for j in range(i + 1, n):
			if a[j] % a[i] == 0 or a[i] % a[j] == 0:
				mxm = max(mxm, dp[j])
		dp[i] = 1 + mxm
	return max(dp)
The following is chain of thought:
1. Initialize a DP array `dp` of length `n` with all zeros.
2. Set the last element `dp[n-1]` to 1 (base case: single element subset).
3. Iterate backwards from index `n-2` to `0`:
   - For each index `i`, initialize `mxm` to