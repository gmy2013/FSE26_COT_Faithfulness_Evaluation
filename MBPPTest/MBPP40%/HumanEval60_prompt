def max_sum_of_three_consecutive(arr, n): 
	sum = [0 for k in range(n)] 
	if n >= 1: 
		sum[0] = arr[0] 
	if n >= 2: 
		sum[1] = arr[0] + arr[1] 
	if n > 2: 
		sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) 
	for i in range(3, n): 
		sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) 
	return sum[n-1]
The following is chain of thought:
Here's the structured chain of thought for the max_sum_of_three_consecutive function:

1. **Problem Analysis**: The function needs to find the maximum sum of elements in an array where no three consecutive elements are selected.

2. **Dynamic Programming Setup**: Create a DP array `sum` to store maximum sums up to each index.

3. **Base Cases**:
   - For n=1: Only one element, so sum[0] = arr[0]
   - For n=2: Can take both elements, so sum[1] = arr[0] + arr[1]
   - For n=3