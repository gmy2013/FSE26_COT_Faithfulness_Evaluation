CodeGeneration:
Here's an optimized implementation using a dictionary for O(n) time complexity:

```python
def get_odd_occurence(arr, arr_size):
    """
    Finds and returns the first element that appears an odd number of times in the array.
    
    Args:
        arr: List of elements
        arr_size: Size of the array
    
    Returns:
        The first element with odd occurrence count, or -1 if none found
    """
    frequency = {}
    
    # Count frequency of each element
    for num in arr:
        frequency[num] = frequency.get(num, 0) + 1
    
    # Find first element with odd count
    for num in arr:
        if frequency[num] % 2 != 0:
            return num
    
    return -1
```

Alternative implementation using XOR bitwise operation (works for integers only):

```python
def get_odd_occurence(arr, arr_size):
    """
    Finds and returns the element that appears an odd number of times in the array.
    Uses XOR operation - only works for integer arrays.
    
    Args:
        arr: List of integers
        arr_size: Size of the array
    
    Returns:
        The element with odd occurrence count, or -1 if none found
    """
    result = 0
    for num in arr:
        result ^= num
    
    # Verify that result actually appears in array
    if result in arr:
        return result
    return -1
```

The dictionary-based solution is more general and works for any hashable data type, while the XOR solution is more space-efficient but only works for integers.
