CodeGeneration:
ist if it doesn't exist, then append 1 to the list.
4. After processing all sublists, iterate through the dictionary items:
   - For each key-value pair, replace the list of 1's with the sum (which gives the count).
5. Return the dictionary with tuples as keys and their counts as values.

Here's the complete function with the docstring:

```python
def unique_sublists(list1):
    """
    Count the occurrences of each unique sublist in the given list of lists.
    
    Args:
        list1 (list): A list containing sublists (which may contain any elements)
    
    Returns:
        dict: A dictionary where keys are tuples (immutable versions of sublists)
              and values are integers representing the count of each unique sublist
    
    Example:
        >>> unique_sublists([[1, 2], [3, 4], [1, 2], [5, 6]])
        {(1, 2): 2, (3, 4): 1, (5, 6): 1}
    """
    result = {}
    for l in list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result
```
