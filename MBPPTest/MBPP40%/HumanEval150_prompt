def check_min_heap(arr, i):
    if 2 * i + 2 > len(arr):
        return True
    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)
    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] 
                                      and check_min_heap(arr, 2 * i + 2))
    return left_child and right_child
The following is chain of thought:
1. The function `check_min_heap` checks if an array `arr` represents a min heap starting from index `i`.
2. The base case: if the right child index (2*i+2) is beyond the array length, then the current node has no children, so it's a valid min heap by default (return True).
3. For the left child: check if the current node's v