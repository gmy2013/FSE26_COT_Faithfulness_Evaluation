CodeGeneration:
Here's the completed function with the chain of thought:

```python
def join_tuples(test_list):
  """
  Join consecutive tuples in the list that have the same first element.
  
  Args:
      test_list: List of tuples to process
  
  Returns:
      List of tuples where consecutive tuples with same first element are merged
  
  Example:
      >>> join_tuples([(5, 6), (5, 7), (6, 8), (6, 9), (7, 10)])
      [(5, 6, 7), (6, 8, 9), (7, 10)]
  """
  res = []
  for sub in test_list:
    if res and res[-1][0] == sub[0]:
      res[-1].extend(sub[1:])
    else:
      res.append([ele for ele in sub])
  res = list(map(tuple, res))
  return res
```

**Chain of Thought:**
1. Initialize an empty list `res` to store the merged tuples as lists (for mutability during processing).
2. Iterate through each tuple `sub` in the input list `test_list`.
3. Check if `res` is not empty and the first element of the last list in `res` matches the first element of the current tuple `sub`.
4. If they match, extend the last list in `res` with the remaining elements of the current tuple (excluding the first element since it's already present).
5. If they don't match or `res` is empty, append the current tuple as a new list to `res`.
6. After processing all tuples, convert all lists in `res` back to tuples.
7. Return the resulting list of merged tuples.

The function efficiently merges consecutive tuples that share the same first element while preserving the order of elements within each merged tuple.
