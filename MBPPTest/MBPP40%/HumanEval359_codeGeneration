CodeGeneration:
2: get_noOfways(2) = get_noOfways(1) + get_noOfways(0) = 1 + 0 = 1
   - n=3: get_noOfways(3) = get_noOfways(2) + get_noOfways(1) = 1 + 1 = 2
   - n=4: get_noOfways(4) = get_noOfways(3) + get_noOfways(2) = 2 + 1 = 3
   - n=5: get_noOfways(5) = get_noOfways(4) + get_noOfways(3) = 3 + 2 = 5

Here's the complete function:

```python
def get_noOfways(n):
    """
    Calculate the number of ways to reach step n when only 1 or 2 steps can be taken at a time.
    
    This function implements the Fibonacci sequence where:
    - get_noOfways(0) = 0
    - get_noOfways(1) = 1
    - get_noOfways(n) = get_noOfways(n-1) + get_noOfways(n-2) for n >= 2
    
    Args:
        n (int): The target step number (non-negative integer)
    
    Returns:
        int: Number of distinct ways to reach step n
    
    Examples:
        >>> get_noOfways(0)
        0
        >>> get_noOfways(1)
        1
        >>> get_noOfways(2)
        1
        >>> get_noOfways(3)
        2
        >>> get_noOfways(4)
        3
        >>> get_noOfways(5)
        5
    """
    if n == 0:
        return 0
    if n == 1:
        return 1
    return get_noOfways(n - 1) + get_noOfways(n - 2)
```
