CodeGeneration:
y moving down from the top-left corner).
4. **Fill First Row**: For each column j from 1 to N-1, dp[0][j] = dp[0][j-1] + cost[0][j] (only moving right from the top-left corner).
5. **Fill Remaining Cells**: For each cell (i, j) where both i and j are from 1 to N-1, dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j] (choosing the path with maximum sum so far).
6. **Return Result**: The maximum average path sum is dp[N-1][N-1] divided by (2*N - 1) (the number of steps in the path).

Here is the complete function:

```python
M = 100
def maxAverageOfPath(cost, N): 
    dp = [[0 for i in range(N + 1)] for j in range(N + 1)] 
    dp[0][0] = cost[0][0] 
    for i in range(1, N): 
        dp[i][0] = dp[i - 1][0] + cost[i][0] 
    for j in range(1, N): 
        dp[0][j] = dp[0][j - 1] + cost[0][j] 
    for i in range(1, N): 
        for j in range(1, N): 
            dp[i][j] = max(dp[i - 1][j], 
                        dp[i][j - 1]) + cost[i][j] 
    return dp[N - 1][N - 1] / (2 * N - 1)
```
