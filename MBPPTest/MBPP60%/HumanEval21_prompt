def get_median(arr1, arr2, n):
  i = 0
  j = 0
  m1 = -1
  m2 = -1
  count = 0
  while count < n + 1:
    count += 1
    if i == n:
      m1 = m2
      m2 = arr2[0]
      break
    elif j == n:
      m1 = m2
      m2 = arr1[0]
      break
    if arr1[i] <= arr2[j]:
      m1 = m2
      m2 = arr1[i]
      i += 1
    else:
      m1 = m2
      m2 = arr2[j]
      j += 1
  return (m1 + m2)/2
The following is chain of thought:
Here's the structured chain of thought for the given function:

1. **Function Purpose**: This function calculates the median of two sorted arrays of equal length (n) by merging them in a single pass.

2. **Initialization**: 
   - `i` and `j` are pointers for traversing `arr1` and `arr2` respectively
   - `m1` and `m2` track the two middle values needed for median calculation
   - `count` controls the loop to stop after finding the middle elements

3. **Loop Execution**: The while loop runs exactly `n+1` times to reach the middle of the combined array (length 2n)

4. **Edge Handling**: 
   - If one array is exhausted (`i == n` or `j == n`), take remaining elements from the other array
   - This ensures we can still find the median even if one array has smaller values

5. **Comparison Logic**: 
   - Compare current elements from both