import re 
regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''
def check_IP(Ip): 
	if(re.search(regex, Ip)): 
		return ("Valid IP address") 
	else: 
		return ("Invalid IP address") 
The following is chain of thought:
The function `check_IP` validates an IPv4 address using a regular expression pattern. Here's the structured chain of thought:

1. **Function Definition**: The function `check_IP` is defined to take one argument `Ip`, which is the string to validate.
2. **Regular Expression Pattern**: The pattern `regex` is designed to match valid IPv4 addresses:
   - Each octet (separated by dots) must be a number between 0 and 255.
   - The pattern accounts for leading zeros (e.g., "192.168.01.1" is invalid, but "192.168.1.1" is valid).
   - The regex uses groups for each octet with alternatives:
        - `25[0-5]` matches 250-255.
        - `2[0-4][0-9]` matches 200-249.
        - `[0-1]?[0-9][0-9]?` matches 0-1