CodeGeneration:
and then takes the square root to get the sample standard deviation.

Based on the provided code and docstring, here's the complete implementation:

```python
import math
import sys

def sd_calc(data):
    """
    Calculate the sample standard deviation of the given data.
    
    Args:
        data: A list of numerical values
        
    Returns:
        float: The sample standard deviation of the data
    """
    n = len(data)
    if n <= 1:
        return 0.0
    mean, sd = avg_calc(data), 0.0
    for el in data:
        sd += (float(el) - mean)**2
    sd = math.sqrt(sd / float(n-1))
    return sd

def avg_calc(ls):
    """
    Calculate the arithmetic mean of the given list of values.
    
    Args:
        ls: A list of numerical values
        
    Returns:
        float: The mean of the values
    """
    n, mean = len(ls), 0.0
    if n <= 1:
        return ls[0] if n == 1 else 0.0
    for el in ls:
        mean = mean + float(el)
    mean = mean / float(n)
    return mean
```

The code correctly implements the sample standard deviation calculation using Bessel's correction (dividing by n-1 instead of n) and handles edge cases appropriately.
