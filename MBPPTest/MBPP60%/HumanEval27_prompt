MAX=1000;
def replace_spaces(string):
  string=string.strip()
  i=len(string)
  space_count=string.count(' ')
  new_length = i + space_count*2
  if new_length > MAX:
    return -1
  index = new_length-1
  string=list(string)
  for f in range(i-2, new_length-2):
    string.append('0')
  for j in range(i-1, 0, -1):
    if string[j] == ' ':
      string[index] = '0'
      string[index-1] = '2'
      string[index-2] = '%'
      index=index-3
    else:
      string[index] = string[j]
      index -= 1
  return ''.join(string)
The following is chain of thought:
1. **Understanding the Problem**: The function replaces each space in a string with "%20", similar to URL encoding. It must handle the string in-place with a fixed maximum length (MAX=1000).

2. **Initial Setup**: 
   - Strip leading/trailing spaces from the input string.
   - Calculate the current length (`i`) and count of spaces (`space_count`).
   - Compute `new_length` = original length + 2 * space_count (since each space becomes 3 characters, but we're replacing one char with three, so net increase of 2 per space).

3. **Check Maximum Length**: If `new_length` exceeds MAX (1000), return -1 to indicate error.

4. **Prepare for In-place Operation**:
   - Convert the string to a list for mutable operations.
   - Extend the list with placeholder characters ('0') to match `new_length`. This ensures we have enough space to shift characters without index errors.

5. **Backward Traversal**:
   - Start from the end of the original string (index `i-1`) and move backwards.
   - For each character:
        - If it's a space, insert "%20" at t