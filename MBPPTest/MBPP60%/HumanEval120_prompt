M = 100
def maxAverageOfPath(cost, N): 
	dp = [[0 for i in range(N + 1)] for j in range(N + 1)] 
	dp[0][0] = cost[0][0] 
	for i in range(1, N): 
		dp[i][0] = dp[i - 1][0] + cost[i][0] 
	for j in range(1, N): 
		dp[0][j] = dp[0][j - 1] + cost[0][j] 
	for i in range(1, N): 
		for j in range(1, N): 
			dp[i][j] = max(dp[i - 1][j], 
						dp[i][j - 1]) + cost[i][j] 
	return dp[N - 1][N - 1] / (2 * N - 1)
The following is chain of thought:
1. **Initialization**: Create a DP table `dp` of size (N+1) x (N+1) initialized to 0.
2. **Base Case**: Set `dp[0][0]` to `cost[0][0]` (starting point).
3. **First Column**: For each row `i` from 1 to N-1, `dp[i][0] = dp[i-1][0] + cost[i][0]` (only downward moves).
4. **First Row**: For each column `j` from 1 to N-1, `dp[0][j] = dp[0][j-1] + cost[0][j]` (only rightwa