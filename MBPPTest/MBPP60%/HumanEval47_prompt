from itertools import zip_longest, chain, tee
def exchange_elements(lst):
    lst1, lst2 = tee(iter(lst), 2)
    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))
The following is chain of thought:
Let's analyze the function step by step:

1. `tee(iter(lst), 2)` creates two independent iterators from the list
2. However, the function doesn't actually use `lst1` and `lst2` from the tee operation
3. Instead, it directly slices the original list `lst`:
   - `lst[1::2]` gets all odd-indexed elements (index 1, 3, 5...)
   - `lst[::2]` gets all even-indexed elements (index 0, 2, 4...)
4. `zip_longest(lst[1::2], lst[::2])` pairs odd-indexed elements with even-indexed elements
5. `chain.from_iterable()` flattens the zipped pairs into a single sequence
6. The result is converted to a list

The function essentially swaps adjacent elements: for [a, b, c, d, e] it returns [b, a, d, c, e]

However