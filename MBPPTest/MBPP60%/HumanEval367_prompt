def floor_Max(A,B,N):
    x = min(B - 1,N)
    return (A*x) // B
The following is chain of thought:
1. Understand the problem: The function computes the maximum value of floor((A*x)/B) for integer x in [0, N].
2. Key insight: The expression (A*x)//B is maximized when x is as large as possible, but there's a constraint: when x â‰¥ B, the floor division repeats values due to modulo behavior.
3. Optimal x: The maximum occurs at x = min(B-1, N) because:
   - For x < B, the function (A*x)//B increases with x
   - At x = B, (A*B)//B = A, but for x = B-1, (A*(B-1))//B might be larger than A-1?
   - Actually, the maximum occurs at