CodeGeneration:
I notice you've provided a complete implementation of the Dutch National Flag algorithm. This function correctly sorts an array containing only 0s, 1s, and 2s in O(n) time with O(1) space complexity.

Here's the complete function with proper docstring:

```python
def sort_by_dnf(arr, n):
    """
    Sort an array containing only 0s, 1s, and 2s using the Dutch National Flag algorithm.
    
    Args:
        arr (list): List containing only elements 0, 1, and 2
        n (int): Length of the array
    
    Returns:
        list: Sorted array with all 0s first, then 1s, then 2s
    
    Example:
        >>> sort_by_dnf([2, 0, 1, 2, 1, 0], 6)
        [0, 0, 1, 1, 2, 2]
    """
    low = 0
    mid = 0
    high = n - 1
    while mid <= high:
        if arr[mid] == 0:
            arr[low], arr[mid] = arr[mid], arr[low]
            low = low + 1
            mid = mid + 1
        elif arr[mid] == 1:
            mid = mid + 1
        else:
            arr[mid], arr[high] = arr[high], arr[mid]
            high = high - 1
    return arr
```

Your implementation is correct and follows the standard DNF algorithm approach:
- `low` tracks the end of the 0s section
- `mid` scans through the array
- `high` tracks the beginning of the 2s section

The algorithm efficiently sorts the array in a single pass with constant extra space.
