CodeGeneration:
he current position in the new string (index) and decrement index by 3.
        - Otherwise, copy the character to the new position and decrement index by 1.

6. **Return Result**: Convert the list back to a string and return it.

However, there are a few issues in the provided code:
- The loop for extending the list uses `range(i-2, new_length-2)` which might not correctly extend to the required length.
- The backward traversal starts from `i-1` down to 0, but the original string might have leading spaces that were stripped, so indices need adjustment.

Let me correct and complete the function:

```python
MAX = 1000

def replace_spaces(string):
    string = string.strip()
    i = len(string)
    space_count = string.count(' ')
    new_length = i + space_count * 2
    if new_length > MAX:
        return -1
    index = new_length - 1
    string_list = list(string)
    # Extend the list to the new length with placeholders
    for _ in range(new_length - i):
        string_list.append('0')
    # Traverse backwards from the end of the original content
    for j in range(i - 1, -1, -1):
        if string_list[j] == ' ':
            string_list[index] = '0'
            string_list[index - 1] = '2'
            string_list[index - 2] = '%'
            index -= 3
        else:
            string_list[index] = string_list[j]
            index -= 1
    return ''.join(string_list)
```

This corrected version:
1. Properly extends the list to `new_length` by appending the necessary number of placeholders.
2. Traverses from the last character of the original content (index `i-1`) down to the first (index 0).
3. Correctly handles the replacement of spaces with "%20" and shifts non-space characters.

The function now efficiently replaces spaces with "%20" in-place while respecting the maximum length constraint.
