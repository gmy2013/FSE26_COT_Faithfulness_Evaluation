def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) : 
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return ("Not Possible") 
The following is chain of thought:
Here's the structured chain of thought for the min_Swaps function:

1. **Problem Analysis**: The function calculates the minimum number of swaps needed to transform str1 into str2, where each swap exchanges two characters in str1.

2. **Key Insight**: Each swap can fix two mismatches simultaneously. Therefore, the minimum number of swaps equals half the number of mismatches.

3. **Edge Case**: If the number of mismatches is odd, it's impossible to transform str1 into str2 using swaps, as each swap fixes an even number of mismatches.

4. **Implementation Logic**:
   - Initialize a counter to track mismatches
   - Iterate through both strings characte