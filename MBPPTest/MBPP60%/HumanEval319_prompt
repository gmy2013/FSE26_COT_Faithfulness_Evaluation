def remove_tuple(test_list):
  res = [sub for sub in test_list if not all(ele == None for ele in sub)]
  return (str(res)) 
The following is chain of thought:
1. Understand the function purpose: Remove tuples from `test_list` where all elements are `None`.
2. Analyze the current implementation:
   - Uses list comprehension to iterate over each tuple `sub` in `test_list`.
   - Checks condition: `not all(ele == None for ele in sub)`.
   - This condition is `True` if at least one element in the tuple is not `None`.
   - Thus, it filters out tuples where every element is `None`.
   - Converts the result to a string before returning.
3. Identify potential issues:
   - The function returns a string representation instead of the list itself.
   - This might not be the intended behavior if further processing is needed.
4. Consider edge cases:
   