

def is_palindrome(string: str) -> bool:
    """ Test if given string is a palindrome """
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """ Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """

The following is chain of thought:
To implement `make_palindrome`, we need to:
1. Find the longest palindromic suffix of the input string
2. The prefix that needs to be appended in reverse is the part before this suffix
3. Return the original string + reverse of that prefix

Chain of thought:
- Start from the end of the string and check progressively shorter suffixes
- For each suffix position, check if that substring is a palindrome
- The first (longest) palindromic suffix found determines what needs to be appended
- Append the reverse of the prefix that comes before this palindromic suffix

```python
def make_palindrome(string: str) -> str:
    """ Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindrom