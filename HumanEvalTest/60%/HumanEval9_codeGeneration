CodeGeneration:
ach number in the input list
- For each number, update current_max to be the maximum of current_max and the current number
- Append current_max to the result list
- Return the result list

Here's the implementation:

```python
from typing import List


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """
    if not numbers:
        return []
    
    result = []
    current_max = float('-inf')
    
    for num in numbers:
        current_max = max(current_max, num)
        result.append(current_max)
    
    return result
```

Alternative implementation using list comprehension with cumulative max:

```python
from typing import List
from itertools import accumulate


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """
    return list(accumulate(numbers, max))
```

Both implementations will produce the correct result. The first one is more explicit and easier to understand, while the second one is more concise using Python's built-in `itertools.accumulate` function.
