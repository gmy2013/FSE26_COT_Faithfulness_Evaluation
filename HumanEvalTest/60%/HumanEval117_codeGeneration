CodeGeneration:
num():
                consonant_count += 1
        if consonant_count == n:
            result.append(word)
    return result
```

However, note that the problem states the input string contains only letters and spaces, so we don't need to worry about other characters. Let me test this with the provided examples:

1. "Mary had a little lamb", 4: "little" has consonants: l,t,t,l → 4 ✓
2. "Mary had a little lamb", 3: "Mary" has consonants: M,r,y → 3, "lamb" has consonants: l,m,b → 3 ✓
3. "simple white space", 2: "simple" has consonants: s,m,p,l → 4, "white" has consonants: w,h,t → 3, "space" has consonants: s,p,c → 3 → [] ✓
4. "Hello world", 4: "world" has consonants: w,r,l,d → 4 ✓
5. "Uncle sam", 3: "Uncle" has consonants: n,c,l → 3 ✓

The implementation looks correct. Here's the complete function:

```python
def select_words(s, n):
    """Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words("Mary had a little lamb", 4) ==> ["little"]
    select_words("Mary had a little lamb", 3) ==> ["Mary", "lamb"]
    select_words("simple white space", 2) ==> []
    select_words("Hello world", 4) ==> ["world"]
    select_words("Uncle sam", 3) ==> ["Uncle"]
    """
    vowels = "aeiouAEIOU"
    words = s.split()
    result = []
    for word in words:
        consonant_count = 0
        for char in word:
            if char not in vowels and char.isalpha():
                consonant_count += 1
        if consonant_count == n:
            result.append(word)
    return result
```
