CodeGeneration:
```python
import math


def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """ xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """
    # Initialize the interval with sufficiently large bounds
    a = -100.0
    b = 100.0
    tolerance = 1e-6
    
    # Check if endpoints are already roots
    if abs(poly(xs, a)) < tolerance:
        return a
    if abs(poly(xs, b)) < tolerance:
        return b
    
    # Bisection method to find root
    while (b - a) > tolerance:
        mid = (a + b) / 2.0
        f_mid = poly(xs, mid)
        
        if abs(f_mid) < tolerance:
            return mid
            
        if f_mid * poly(xs, a) < 0:
            b = mid
        else:
            a = mid
    
    return (a + b) / 2.0
```
