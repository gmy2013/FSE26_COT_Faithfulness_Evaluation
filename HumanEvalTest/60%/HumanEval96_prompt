
def count_up_to(n):
    """Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """

The following is chain of thought:
To implement the `count_up_to(n)` function, we need to generate all prime numbers less than a given non-negative integer `n`. The function should return these primes as a list. Here's the step-by-step approach:

1. **Handle edge cases**: If `n` is less than or equal to 2, there are no primes below it (since the smallest prime is 2), so return an empty list.
2. **Prime checking helper function**: Create a helper function `is_prime(x)` to check if a number `x` is prime. This function will:
   - Return `False` if `x` is less than 2.
   - Check divisibility from 2 up to the square root of `x` (for efficiency).
3. **Generate primes**: Iterate through numbers from 2 up to `n-1` (since primes must be less than `n`), and use the 