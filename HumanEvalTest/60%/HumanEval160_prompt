
def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """

The following is chain of thought:
Let's break down the problem:

1. We have two lists: `operator` (containing strings of operations) and `operand` (containing integers).
2. The expression should be built by alternating operands and operators: first operand, first operator, second operand, second operator, etc.
3. We need to evaluate the expression with standard operator precedence (exponentiation, multiplication/division, addition/subtraction).
4. However, note the example: `2 + 3 * 4 - 5` evaluates to 9 (which is correct with precedence: 3*4=12, then 2+12=14, then 14-5=9).
5. Since we are building an expression with multiple operators of different precedences, we cannot simply evaluate left-to-right.

Approach:
- We can use a stack-based evaluation or convert to postfix, but that might be complex.
- Alternatively, we can use recursion or built-in eval, but eval is dangerous if we don't trust the input.
- However, the problem states that the operators are only from the allowed set and operands are non-negative integers, so eval is safe.
- But note: the problem requires floor division (//) and exponentiation (**), which are standard.

Plan:
- Construct a string expression by interleaving operands and operators.
- Use eval to co