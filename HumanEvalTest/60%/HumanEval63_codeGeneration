CodeGeneration:
Here's the implementation of the fibfib function with memoization:

```python
def fibfib(n: int):
    """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """
    memo = {0: 0, 1: 0, 2: 1}
    
    def fib_helper(n):
        if n not in memo:
            memo[n] = fib_helper(n-1) + fib_helper(n-2) + fib_helper(n-3)
        return memo[n]
    
    return fib_helper(n)
```

This implementation uses memoization to store previously computed values, making it efficient by avoiding redundant calculations. The function handles the base cases (n=0, n=1, n=2) directly and recursively computes larger values by summing the three previous terms, caching each result as it goes.
