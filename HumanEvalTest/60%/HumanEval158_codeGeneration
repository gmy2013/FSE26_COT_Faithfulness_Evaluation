CodeGeneration:
Here's the implementation of the function:

```python
def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == "aaaaaaa"
    """
    if not words:
        return ""
    
    max_unique_count = -1
    best_word = ""
    
    for word in words:
        unique_count = len(set(word))
        
        if unique_count > max_unique_count:
            max_unique_count = unique_count
            best_word = word
        elif unique_count == max_unique_count:
            # Choose lexicographically smaller word
            if word < best_word:
                best_word = word
    
    return best_word
```

The function works as follows:
1. Handles empty input list by returning an empty string
2. Initializes variables to track the maximum unique count and best word
3. For each word, calculates the number of unique characters using `len(set(word))`
4. If the current word has more unique characters, it becomes the new best word
5. If the current word has the same number of unique characters as the current best, it compares lexicographically and chooses the smaller one
6. Returns the best word found

Test cases:
```python
print(find_max(["name", "of", "string"]))  # "string"
print(find_max(["name", "enam", "game"]))  # "enam"
print(find_max(["aaaaaaa", "bb", "cc"]))   # "aaaaaaa"
```
