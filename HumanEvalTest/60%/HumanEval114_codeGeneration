CodeGeneration:
Here's the implementation based on the chain of thought:

```python
def minSubArraySum(nums):
    """
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """
    if not nums:
        return 0
        
    current_min = nums[0]
    global_min = nums[0]
    
    for i in range(1, len(nums)):
        current_min = min(nums[i], current_min + nums[i])
        global_min = min(global_min, current_min)
    
    return global_min
```

This implementation uses a modified Kadane's algorithm to find the minimum subarray sum:
1. Initialize both `current_min` and `global_min` to the first element
2. For each subsequent element, calculate the minimum sum ending at that position
3. Update the global minimum if a smaller sum is found
4. Return the global minimum at the end

The algorithm runs in O(n) time complexity with O(1) space complexity.
