
def eat(number, need, remaining):
    """
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """

The following is chain of thought:
We are given three integers: number (already eaten), need (additional needed), remaining (available).
 We need to compute:
   total_eaten = number + min(need, remaining)   [if we can't get all we need, we eat all remaining]
   left = remaining - min(need, remaining)        [what remains after we eat]

 However, note the examples:
   eat(5,6,10) -> [11,4]: total_eaten = 5 + 6 = 11? But wait, we have 10 remaining, so we can only eat 6? Actually, we need 6 and there are 10, so we can eat all 6. Then left = 10-6=4.
   But in eat(2,11,5) -> [7,0]: we need 11 but only 5 left, so we eat all 5. T