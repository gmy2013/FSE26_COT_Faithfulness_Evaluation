CodeGeneration:
else: balance -= 1
            if balance < 0: return False
        for char in second:
            if char == '(': balance += 1
            else: balance -= 1
            if balance < 0: return False
        return balance == 0

   - Then, for the given list `lst` with two strings:
        if is_balanced_order(lst[0], lst[1]) or is_balanced_order(lst[1], lst[0]):
            return 'Yes'
        else:
            return 'No'

Let's implement accordingly.

```python
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
    def is_balanced_order(first, second):
        balance = 0
        for char in first:
            if char == '(':
                balance += 1
            else:
                balance -= 1
            if balance < 0:
                return False
        for char in second:
            if char == '(':
                balance += 1
            else:
                balance -= 1
            if balance < 0:
                return False
        return balance == 0
    
    s1, s2 = lst
    if is_balanced_order(s1, s2) or is_balanced_order(s2, s1):
        return 'Yes'
    else:
        return 'No'
```
