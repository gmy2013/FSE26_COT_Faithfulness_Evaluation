CodeGeneration:
To solve this problem, we need to process each string in the input list, count the number of odd digits in each string, and generate an output string by replacing every occurrence of the letter 'i' in a specific template with the count of odd digits (as a string). 

Here is the step-by-step approach:
1. For each string in the input list, iterate through each character (digit) and count how many of them are odd (i.e., when converted to an integer, the number is not divisible by 2).
2. Convert this count to a string.
3. Define the template string: "the number of odd elements in the string i of the input."
4. Replace every occurrence of the letter 'i' in the template with the string representation of the count.
5. Collect all such processed strings into a list and return it.

Let's implement this accordingly.

```python
def odd_count(lst):
    """Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be "the number of odd elements in the
    string i of the input." where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    ["the number of odd elements 4n the str4ng 4 of the 4nput."]
    >>> odd_count(['3',"11111111"])
    ["the number of odd elements 1n the str1ng 1 of the 1nput.",
     "the number of odd elements 8n the str8ng 8 of the 8nput."]
    """
    result = []
    template = "the number of odd elements in the string i of the input."
    for s in lst:
        count = 0
        for char in s:
            if int(char) % 2 == 1:
                count += 1
        n_str = str(count)
        # Replace every 'i' in the template with n_str
        output_str = template.replace('i', n_str)
        result.append(output_str)
    return result
```
