
def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
    """

The following is chain of thought:
1. We need to process each word in the input list to determine which has the maximum number of unique characters.
2. For each word, calculate the number of unique characters by converting it to a set and then getting the length.
3. We need to compare these counts across all words to find the maximum.
4. If multiple words have the same maximum count, we must return the one that is lexicographically smallest (comes first in dictionary order).
5. We can iterate through the list, keeping track of the current best candidate (word with highest unique count, and lexicographically smallest in case of ties).
6. Initialize variables to store the maximum unique count found so far and the corresponding best word.
7. For each word in the list:
   - Calculate the number of unique characters (len(set(word))).
   - Compare this count with the current maximum:
        - If greater, update the maximum and set the best word to current word.
        - If equal, compare the current word lexicog