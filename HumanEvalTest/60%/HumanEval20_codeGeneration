CodeGeneration:
[i] and number[i+1].
4. For each pair, compute the absolute difference.
5. If this difference is less than the current minimum, update the minimum and the pair.
6. After the loop, return the pair (since the list is sorted, the first element of the pair will be the smaller one).

Let's code accordingly.

```python
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """ From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """
    sorted_nums = sorted(numbers)
    min_diff = float('inf')
    closest_pair = (sorted_nums[0], sorted_nums[1])
    
    for i in range(len(sorted_nums) - 1):
        diff = abs(sorted_nums[i] - sorted_nums[i+1])
        if diff < min_diff:
            min_diff = diff
            closest_pair = (sorted_nums[i], sorted_nums[i+1])
    
    return closest_pair
```
