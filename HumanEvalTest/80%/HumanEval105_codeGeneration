CodeGeneration:
Here's the implementation of the function:

```python
def by_length(arr):
    """
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """
    # Filter numbers between 1 and 9 inclusive
    filtered = [x for x in arr if 1 <= x <= 9]
    
    # Sort and reverse the filtered array
    sorted_reversed = sorted(filtered, reverse=True)
    
    # Map digits to their corresponding names
    names = ["One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"]
    
    # Convert each digit to its name (digit-1 gives the correct index)
    result = [names[digit-1] for digit in sorted_reversed]
    
    return result
```

This implementation:
1. Filters the input array to only include numbers between 1-9
2. Sorts the filtered numbers in descending order (using `reverse=True`)
3. Maps each digit to its corresponding name using a list lookup
4. Handles edge cases like empty arrays and numbers outside the 1-9 range automatically

The solution is efficient with O(n log n) time complexity due to the sorting operation.
