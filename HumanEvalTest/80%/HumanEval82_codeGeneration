CodeGeneration:
Here's the implementation of the `prime_length` function:

```python
def prime_length(string):
    """Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """
    n = len(string)
    
    # Handle cases where n is less than 2 (not prime)
    if n < 2:
        return False
    
    # Check for divisibility from 2 to sqrt(n)
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    
    return True
```

**Explanation:**
- First, we get the length of the input string
- If the length is less than 2, we immediately return False since prime numbers must be ≥2
- For lengths ≥2, we check divisibility from 2 up to the square root of the length (inclusive)
- If any divisor is found, we return False (not prime)
- If no divisors are found, we return True (prime)

The function correctly handles all the test cases:
- 'Hello' (length 5) → prime → True
- 'abcdcba' (length 7) → prime → True  
- 'kittens' (length 7) → prime → True
- 'orange' (length 6) → not prime → False
