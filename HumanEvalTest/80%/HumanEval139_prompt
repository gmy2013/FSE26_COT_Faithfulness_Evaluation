
def special_factorial(n):
    """The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """

The following is chain of thought:
We are to compute the product of factorials from n down to 1.
 Steps:
 1. We need to compute the factorial for each integer from 1 to n.
 2. Then multiply all these factorials together.

 However, note that the definition is:
   special_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!

 We can break this down:
   Let result = 1
   For i from 1 to n:
        compute factorial of i (call this fact_i)
        then multiply result by fact_i

 But note: we are computing factorials for 1, 2, ..., n and then multiplying them.

 Alternatively, we can compute the product without recalculating the entire factorial for each i from scratch.
 We can use the fact that:
   i! = i * (i-1)!
 So we can compute the factorial for i by multiplying the previous factorial by i.

 However, note that we are multiplying together the factorials of 1,2,...,n.

 We can do:
   current_factorial = 1
   result = 1
   for i in range(1, n+1):
        current_factorial *= i   # now current_factorial = i!
        result *= current_factorial

 Example for n=4:
   i=1: current_factorial = 1*1 = 1 -> result = 1*1 = 1
   i=2: current_factorial = 1*2 = 2 -> result = 1*2 = 2
   i=3: current_factorial = 2*3 = 6 -> result = 2*6 = 12
   i=4: current_factorial = 6*4 = 24 -> result = 12*24 = 288

 This matches the exa