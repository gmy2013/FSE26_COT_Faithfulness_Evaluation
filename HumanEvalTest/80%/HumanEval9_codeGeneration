CodeGeneration:
Based on your chain of thought, here's the complete implementation:

```python
from typing import List


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """
    result = []
    current_max = float('-inf')
    
    for num in numbers:
        if num > current_max:
            current_max = num
        result.append(current_max)
    
    return result
```

This implementation:
1. Initializes an empty result list to store the rolling maximums
2. Starts with `current_max` set to negative infinity to ensure any integer will be larger
3. Iterates through each number in the input list
4. Updates `current_max` whenever a larger number is encountered
5. Appends the current maximum to the result list at each step
6. Returns the complete list of rolling maximums

The algorithm has O(n) time complexity and O(n) space complexity, making it efficient for the task.
