

def monotonic(l: list):
    """Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """

The following is chain of thought:
To solve this problem, we need to determine if a list is monotonic, meaning it is either entirely non-increasing or non-decreasing. 

1. Check if the list has 0 or 1 elements: such lists are trivially monotonic.
2. Determine the direction by comparing the first and last elements (if they are equal, we need to check further).
3. Based on the direction, verify every consecutive pair satisfies the monotonic condition.

However, a more straightforward approach is to check both conditions without explicitly determining direction:
- Check if the list is non-decreasing (each element <= next) OR non-increasing (each element >= next).

But note: if all elements are equal, both conditions hold.

Implementation plan:
- Use two boolean flags: is_non_decreasing and is_non_increasing.
- Iterate through adjacent pairs and update the flags accordingly.
- Return True if either flag remains True.

Alternatively, we can do:
- Check if sorted(l) equals l (non-decreasing) or sorted(l, reverse=True) equals l (non-increasing). But this is O(n log n) and inefficient for large lists.

Efficient way (O(n)):
- Traverse the list once to check for non-decreasing, and once for non-increasing? Actually, we can do both in one pass.

Code structure:
def monotonic(l):
    if len(l) <= 2:
        return True
    is_non_decreasing = True
    is_non_increasing = True
    for i in range(len(l)-1):
        if l[i] > l[i+1]:
            is_non_decreasing = False
        if l[i] < l[i+1]:
            is_non_increasing = False
    return is_non_decreasing or is_non_increasing

This handles all cases: 
- If all equal: both flags remain True.
- If increasing: only non_decreasing True.
- If decreasing: only non_increasing True.
- Otherwise both become False.

Let's test with examples:
[1,2,4,20]: 
  1<2 -> non_increasing becomes False, b