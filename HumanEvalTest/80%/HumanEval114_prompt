
def minSubArraySum(nums):
    """
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """

The following is chain of thought:
We are to find the minimum sum of any non-empty subarray.
 This is similar to the classic "maximum subarray sum" problem (Kadane's algorithm) but for minimum.
 We can use a similar approach by iterating through the array and keeping track of the minimum sum ending at each position.

 Steps:
 1. Initialize two variables:
    - min_ending_here = nums[0] (minimum sum of subarray ending at current index)
    - min_so_far = nums[0] (overall minimum sum found so far)

 2. Iterate from the second element to the end of the list.
 3. For each number, update min_ending_here to be the minimum between the current number and the sum of min_ending_here + current number.
    This is because the minimum subarray ending at the current index is either the current element alone or the current element combined with the previous minimum subarray.
 4. Update min_so_far to be the minimum between min_so_far and min_ending_here.
 5. Return min_so_far.

 However, note: if the entire array is positive, the minimum subarray sum would be the smallest element (so the algorithm should work).
 For negative numbers, it will accumulate negatives to find the minimum.

 Example with [2,3,4,1,2,4]:
   We expect the answer to be 1 (the single element).

 Example with [-1,-2,-3]:
   We expect the answer to