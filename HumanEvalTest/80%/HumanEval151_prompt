
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''

The following is chain of thought:
Let's break down the requirements step by step:

1. We need to process a list of numbers.
2. For each number, we must check:
   - Is it an integer? (ignore non-integers)
   - Is it non-negative? (ignore negatives)
   - Is it odd?
3. If all conditions are met, we square the number and add it to the sum.
4. Return 0 for empty list.

We can use a loop to iterate through each element:
- Check if the element is an integer using isinstance(x, int)
- Check if it is non-negative (>=0)
- Check if it is odd (x % 2 != 0)
- If all true, add square to total.

Let's implement accordingly.
```python
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_dif