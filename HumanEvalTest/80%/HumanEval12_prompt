from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """ Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """

The following is chain of thought:
We are given a list of strings. We need to return the longest string.
 If there are multiple strings with the same maximum length, return the first one.
 If the list is empty, return None.

 Steps:
 1. Check if the list is empty -> return None.
 2. We can iterate through the list and keep track of the current longest string.
 3. Initialize a variable to hold the current longest string (start with the first element).
 4. Compare the length of each subsequent string with the current longest.
 5. If we find a string with a greater length, update the current longest.
 6. Since we are going in order, the first occurrence of the longest length will be kept.

 Alternatively, we can use the max function with key=len, which will return the first occurrence of the maximum length.

 However, note: if the list is empty, max will raise an exception. So we need to handle that.

 Let's use:
   if not strings: return None
   else: return max(strings, key=len)

 This matches the requirement: returns the first string with the maximum length.

 But let's