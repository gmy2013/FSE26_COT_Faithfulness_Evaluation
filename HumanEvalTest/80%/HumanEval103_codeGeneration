CodeGeneration:
Here's the implementation of the function:

```python
def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """
    if n > m:
        return -1
    
    average = (n + m) / 2
    rounded_avg = round(average)
    return bin(rounded_avg)
```

The function follows the chain of thought:
1. First checks if n > m and returns -1 if true
2. Calculates the average using the arithmetic series formula (n + m)/2
3. Rounds the average to the nearest integer using round()
4. Converts the rounded integer to binary using bin()
5. Returns the binary string representation
