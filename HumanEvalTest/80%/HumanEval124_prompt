
def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """

The following is chain of thought:
To solve this problem, we need to validate a date string in the format "mm-dd-yyyy" according to specific rules. Let's break down the steps:

1. Check if the date string is not empty.
2. Check if the string matches the exact format "mm-dd-yyyy" (i.e., two digits for month, two for day, four for year, separated by hyphens).
3. Extract the month, day, and year as integers.
4. Check if the month is between 1 and 12.
5. For the day, check based on the month:
   - For months 1,3,5,7,8,10,12: days should be between 1 and 31.
   - For months 4,6,9,11: days should be between 1 and 30.
   - For month 2: days should be between 1 and 29 (ignoring leap year for simplicity as per the problem).
6. Return True if all checks pass, else False.

We'll use a regular expression to validate the format and split the components. Alternatively, we can split by '-' and check the parts.

However, note the example: '06/04/2020' is invalid because of the separator. So we must ensure the separators are hyphens.

Let's implement accordingly.

Code:
```python
import re

def valid_date(date):
    if not date:
        return False
    
    pattern = r'^(\d{2})-(\d{2})-(\d{4})$'
    match = re.match(pattern, date)
    if not match:
        return False
    
    month, day, year = map(int, match.groups())
    
    if month < 1 