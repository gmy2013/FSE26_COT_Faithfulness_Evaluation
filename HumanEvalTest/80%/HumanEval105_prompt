
def by_length(arr):
    """
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """

The following is chain of thought:
Let's break down the problem step by step:

1. Filter the array to only include integers between 1 and 9 inclusive.
2. Sort the filtered array in ascending order.
3. Reverse the sorted array to get descending order.
4. Map each digit to its corresponding name using a list of names where index 0 corresponds to "One" for digit 1, index 1 to "Two" for digit 2, etc.
5. Handle edge cases: empty array returns empty array, and digits outside 1-9 are ignored.

We'll create a list of names where the index i-1 corresponds to the name for digit i.
For example:
  digit 1 -> names[0] = "One"
  digit 2 -> names[1] = "Two"
  ... up to digit 9 -> names[8] = "Nine"

Steps in code:
  filtered = [x for x in arr if 1 <= x <= 9]
  sorted_filtered = sorted(filtered)
  reversed_sorted = sorted_filtered[::-1]   # or 