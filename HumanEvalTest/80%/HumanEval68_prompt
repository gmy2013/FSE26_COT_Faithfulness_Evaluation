
def pluck(arr):
    """
    "Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """

The following is chain of thought:
1. Check if the input array is empty. If yes, return an empty list.
2. Initialize variables to track the smallest even value and its index. Start with `min_even` as a large number (or None) and `min_index` as -1.
3. Iterate through each element in the array with its index.
4. For each element, check if it is even (divisible by 2) and non-negative (which it always is per constraints).
5. If the element is even:
   - If no smallest even has been found yet (`min_even` is still initial) or the current element is smaller than `min_even`, update `min_even` and `min_index`.
   - If the current element equals `min_even`, compare indices: only update if the current index is smaller (to ensure the first occurrence is kept).
6. After iteration, if no even number was found 