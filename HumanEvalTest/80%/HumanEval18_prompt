

def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """

The following is chain of thought:
We are counting overlapping occurrences of substring in string.
 We can iterate through the string and check if substring starts at each index.
 Since we are counting overlaps, we move one character at a time.

 Steps:
 1. If substring is empty, we should return 0 (as per typical behavior, though not specified in examples).
 2. Initialize a counter to 0.
 3. Loop through each starting index i in the range [0, len(string) - len(substring) + 1].
 4. For each i, check if string[i:i+len(substring)] equals substring.
 5. If yes, increment the counter.
 6. Return the counter.

 Note: The examples include:
   how_many_times('', 'a') -> 0 (empty string has no occurrences)
   how_many_times('aaa', 'a') -> 3 (each character is a match)
   how_many_times('aaaa', 'aa') -> 3 (overlapping: indices 0,1,2 yield matches: [0:2]='aa', [1:3]='aa', [2:4]='aa')
```python
def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_tim