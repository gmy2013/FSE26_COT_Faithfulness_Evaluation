
def intersection(interval1, interval2):
    """You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return "YES",
    otherwise, return "NO".
    If the two intervals don't intersect, return "NO".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> "NO"
    intersection((-1, 1), (0, 4)) ==> "NO"
    intersection((-3, -1), (-5, 5)) ==> "YES"
    """

The following is chain of thought:
1. Determine the intersection of the two intervals:
   - The intersection start is max(interval1[0], interval2[0])
   - The intersection end is min(interval1[1], interval2[1])
   - If start > end, there is no intersection (return "NO")

2. Calculate the length of intersection: end - start + 1 (since intervals are inclusive)

3. Check if the length is prime:
   - If length <= 1, not prime (return "NO")
   - For numbers > 1, check divisibility from 2 to sqrt(length)
   - If any divisor found, not prime (return "NO")
   - Otherwise, prime (return "YES")

4. Handle edge cases:
   - Negative numbers: absolute value doesn't matter for primality, but length must be positive