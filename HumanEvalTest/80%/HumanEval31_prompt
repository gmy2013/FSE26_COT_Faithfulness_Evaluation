

def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """

The following is chain of thought:
Let's break down the problem step by step:

1. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.
2. We need to handle edge cases: numbers less than 2 are not prime.
3. For numbers 2 and above, we need to check divisibility by integers from 2 up to the square root of n (inclusive). If any of these divides n, it's not prime.
4. We can optimize by checking divisibility by 2 first, then only odd numbers thereafter.

Here's the implementation plan:
- If n < 2, return False.
- If n == 2, return True (the only even prime).
- If n is even and not 2, return False.
- Check odd divisors from 3 to sqrt(n) (inclusive), stepping by 2.
- If no divisors found, return True.

Now, writing the code accordingly:

```python
def is_prime(n):
    if n < 2:
        