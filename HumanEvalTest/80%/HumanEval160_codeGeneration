CodeGeneration:
```python
def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """
    # Build the token list from operands and operators
    tokens = [operand[0]]
    for i in range(len(operator)):
        tokens.append(operator[i])
        tokens.append(operand[i+1])
    
    # Handle exponentiation (right-associative) from right to left
    i = len(tokens) - 2
    while i > 0:
        if tokens[i] == '**':
            tokens[i-1] = tokens[i-1] ** tokens[i+1]
            del tokens[i:i+2]
        i -= 2
    
    # Handle multiplication and floor division (left-associative) from left to right
    i = 1
    while i < len(tokens) - 1:
        if tokens[i] == '*':
            tokens[i-1] = tokens[i-1] * tokens[i+1]
            del tokens[i:i+2]
        elif tokens[i] == '//':
            tokens[i-1] = tokens[i-1] // tokens[i+1]
            del tokens[i:i+2]
        else:
            i += 2
    
    # Handle addition and subtraction (left-associative) from left to right
    i = 1
    while i < len(tokens) - 1:
        if tokens[i] == '+':
            tokens[i-1] = tokens[i-1] + tokens[i+1]
            del tokens[i:i+2]
        elif tokens[i] == '-':
            tokens[i-1] = tokens[i-1] - tokens[i+1]
            del tokens[i:i+2]
        else:
            i += 2
    
    return tokens[0]
```
