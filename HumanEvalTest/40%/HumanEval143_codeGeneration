CodeGeneration:
e root of the number.
3. Iterate through each word in the list, check if the length of the word is prime.
4. Collect words with prime lengths in a new list, maintaining the original order.
5. Join the collected words with spaces and return the resulting string.

Here's the implementation:

```python
def words_in_sentence(sentence):
    """
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = "This is a test"
        Output: "is"

    Example 2:
        Input: sentence = "lets go for swimming"
        Output: "go for"

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """
    def is_prime(n):
        if n < 2:
            return False
        if n == 2:
            return True
        if n % 2 == 0:
            return False
        for i in range(3, int(n**0.5) + 1, 2):
            if n % i == 0:
                return False
        return True
    
    words = sentence.split()
    result = []
    
    for word in words:
        if is_prime(len(word)):
            result.append(word)
    
    return ' '.join(result)
```
