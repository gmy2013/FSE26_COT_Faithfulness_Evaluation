

def is_palindrome(string: str) -> bool:
    """ Test if given string is a palindrome """
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """ Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """

The following is chain of thought:
To implement `make_palindrome`, we need to find the longest palindromic suffix of the input string, then append the reverse of the remaining prefix to the end.

Chain of thought:
1. If the string is already a palindrome, return it as is.
2. Otherwise, iterate from the start to find the smallest index where the substring from that index to the end is a palindrome.
3. The part before this index (prefix) needs to be reversed and appended to the original string.
4. Specifically, for index i, if string[i:] is a palindrome, then the palindrome is string + string[:i][::-1].

Let's implement accordingly:

```python
def make_palindrome(string: str) -> str:
    """ Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    