CodeGeneration:
ip the first character (the minus sign).
- Iterate through each character in the string.
- Convert each character to integer.
- Check if the integer is even (using % 2 == 0) and update counts accordingly.
- Return the tuple (even_count, odd_count).

Here is the implementation:
```python
def even_odd_count(num):
    """Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """
    s = str(num)
    even_count = 0
    odd_count = 0
    for char in s:
        if char == '-':
            continue
        digit = int(char)
        if digit % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)
```
