

def fibfib(n: int):
    """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """

The following is chain of thought:
Looking at this problem, I need to implement a recursive sequence similar to Fibonacci but with three base cases and summing the previous three terms.

Chain of thought:
1. Base cases: fibfib(0) = 0, fibfib(1) = 0, fibfib(2) = 1
2. For n â‰¥ 3: fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
3. Since this is recursive, I need to handle the base cases fir