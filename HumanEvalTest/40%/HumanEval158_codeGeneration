CodeGeneration:
nique count, compare lexicographically and keep the smaller one.

Here's the implementation:

```python
def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == "aaaaaaa"
    """
    if not words:
        return ""
    
    max_unique = -1
    result_word = ""
    
    for word in words:
        unique_count = len(set(word))
        
        if unique_count > max_unique:
            max_unique = unique_count
            result_word = word
        elif unique_count == max_unique:
            if word < result_word:
                result_word = word
    
    return result_word
```

The function works as follows:
1. Handles empty input list by returning empty string
2. Initializes max_unique to -1 and result_word to empty string
3. For each word, calculates unique character count using set conversion
4. If current word has more unique characters, updates both max_unique and result_word
5. If current word has equal unique characters, compares lexicographically and keeps the smaller one
6. Returns the word with maximum unique characters (lexicographically first in case of ties)
