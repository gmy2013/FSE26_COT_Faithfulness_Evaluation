

def encode_cyclic(s: str):
    """
    returns encoded string by cycling groups of three characters.
    """
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    """
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """

The following is chain of thought:
To decode a string encoded by `encode_cyclic`, we need to reverse the encoding operation. The encoding cycles each group of three characters by moving the first character to the end (e.g., "abc" becomes "bca"). Therefore, decoding requires reversing this cycle: moving the last character to the front (e.g., "bca" becomes "abc").

Steps for `decode_cyclic`:
1. Split the string into groups of three characters (same as encoding).
2. For each group of exactly three characters, rever