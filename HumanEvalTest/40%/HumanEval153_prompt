
def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """

The following is chain of thought:
1. The function needs to calculate the strength for each extension using the formula: CAP - SM, where CAP is count of uppercase letters and SM is count of lowercase letters.
2. Initialize variables to track the strongest extension and its strength value.
3. Iterate through each extension in the extensions list.
4. For each extension, count the number of uppercase letters and lowercase letters.
5. Calculate the strength as (number of uppercase) - (number of lowercase).
6. Compare the current extension's strength with the current maximum strength.
7. If the current strength is 