CodeGeneration:
Here's the implementation:

```python
from typing import List


def sort_numbers(numbers: str) -> str:
    """ Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """
    # Create mapping dictionaries
    word_to_num = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    
    num_to_word = {v: k for k, v in word_to_num.items()}
    
    # Split the input string into words
    words = numbers.split()
    
    # Convert words to numbers, sort them, then convert back to words
    sorted_words = [num_to_word[num] for num in sorted([word_to_num[word] for word in words])]
    
    # Join the sorted words back into a string
    return ' '.join(sorted_words)
```

This implementation:
1. Creates two dictionaries: one to map words to numbers and another to map numbers back to words
2. Splits the input string into individual words
3. Converts each word to its numerical equivalent
4. Sorts the numerical values
5. Converts the sorted numbers back to their word representations
6. Joins the sorted words back into a space-delimited string

The function correctly handles the example: `sort_numbers('three one five')` returns `'one three five'`
