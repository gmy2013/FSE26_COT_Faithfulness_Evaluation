from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """ Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """

The following is chain of thought:
I need to create a function that takes a string of multiple parenthesis groups separated by spaces and returns a list of the maximum nesting depth for each group.

Let me break this down:
1. Split the input string by spaces to get individual parenthesis groups
2. For each group, calculate the maximum nesting depth
3. Return a list of these maximum depths

To calculate the maximum nesting depth for a single parenthesis string:
- Initialize current_depth = 0 and max_depth = 0
- Iterate through each character in the string
- When encountering '(', increment current_depth and update max_depth if needed
- When encountering ')', decrement current_depth
- Return max_depth

Let me implement this step by step:

```python
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """ Input to this funct