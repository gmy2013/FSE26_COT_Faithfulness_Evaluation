
def cycpattern_check(a , b):
    """You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check("abcd","abd") => False
    cycpattern_check("hello","ell") => True
    cycpattern_check("whassup","psus") => False
    cycpattern_check("abab","baa") => True
    cycpattern_check("efef","eeff") => False
    cycpattern_check("himenss","simen") => True

    """

The following is chain of thought:
**Chain of Thought:**

1. **Understand the Problem:** We need to check if the second word `b` (or any rotation of it) is a substring of the first word `a`.
2. **Key Insight:** A rotation of a string can be generated by concatenating the string with itself and then taking slices of length `len(b)`. For example, rotations of "abc" are "abc", "bca", "cab".
3. **Approach:**
   - Generate all rotations of `b` by iterating over each starting index in the doubled string `b + b`.
   - For each rotation, check if it exists as a substring in `a`.
   - If any rotation is found in `a`, return True immediately.
   - If no rotati