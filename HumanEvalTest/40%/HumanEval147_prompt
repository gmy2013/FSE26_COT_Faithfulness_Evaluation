
def get_max_triples(n):
    """
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """

The following is chain of thought:
Let's break down the problem step by step:

1. We need to generate an array `a` of length `n` where for each index `i` (1-indexed), `a[i] = i*i - i + 1`.
   Note: In code, we'll use 0-indexed indices, so for index `i` (0-indexed), the value corresponds to `(i+1)`.

2. We are to count the number of triples (i, j, k) with indices `i < j < k` such that `(a[i] + a[j] + a[k]) % 3 == 0`.

3. Instead of generating the entire array and then iterating over all possible triples (which would be O(n^3) and inefficient for large n),
   we can use a combinatorial approach by analyzing the values modulo 3.

4. Let's compute the value of `a[i]` modulo 3 for a given i (1-indexed):
   a[i] = i*i - i + 1.
   We can simplify modulo 3:
   Consider cases for i mod 3:

   - If i ≡ 0 (mod 3): 
        i*i ≡ 0, -i ≡ 0, +1 ≡ 1  => a[i] ≡ 1 (mod 3)
   - If i ≡ 1 (mod 3):
        i*i ≡ 1, -i ≡ -1 ≡ 2, +1 ≡ 1 => 1+2+1 = 4 ≡ 1 (mod 3)
   - If i ≡ 2 (mod 3):
        i*i ≡ 4 ≡ 1, -i ≡ -2 ≡ 1, +1 ≡ 1 => 1+1+1 = 3 ≡ 0 (mod 3)

   So:
        if i % 3 == 0: value ≡ 1
        if i % 3 == 1: value ≡ 1
        if i % 3 == 2: value ≡ 0

   Therefore, the value of a[i] mod 3 is 1 for i not divisible by 3 (i.e., i % 3 != 2), and 0 for i divisible by 3 (i.e., i % 3 == 2).

   Actually, wait: for i=2 (which is 2 mod 3): we get 0. For i=3: 3 mod 3=0 -> 1. For i=4: 4 mod 3=1 -> 1. For i=5: 5 mod 3=2 -> 0.

   So we can categorize the indices (1-indexed) by their residue mod 3:
        residue 0: value ≡ 1
        residue 1: value ≡ 1
        residue 2: value ≡ 0

5. Therefore, in the array, the value at index i (1-indexed) is:
   - 0 mod 3 if i % 3 == 2
   - 1 mod 3 otherwise.

6. Now, we need to count triples (i, j, k) with i<j<k (1-indexed indices) such that the sum of the three values is divisible by 3.

   Since each value is either 0 or 1 mod 3, the possible sums mod 3 and the conditions:
        (0+0+0) = 0 mod 3 -> valid
        (0+0+1) = 1 mod 3 -> invalid
        (0+1+1) = 2 mod 3 -> invalid
        (1+1+1) = 3 ≡ 0 mod 3 -> va