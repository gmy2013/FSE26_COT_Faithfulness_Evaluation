CodeGeneration:
Here's the implementation:

```python
def solve(N):
    """Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be "1".
        For N = 150, the sum of digits will be 6 the output should be "110".
        For N = 147, the sum of digits will be 12 the output should be "1100".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """
    # Convert N to string to access each digit
    n_str = str(N)
    
    # Calculate sum of digits
    digit_sum = sum(int(digit) for digit in n_str)
    
    # Convert sum to binary and remove '0b' prefix
    binary_result = bin(digit_sum)[2:]
    
    return binary_result
```

This implementation follows the chain of thought:
1. Convert the integer N to a string to access each digit individually
2. Sum the integer values of all digits
3. Convert the sum to binary using Python's built-in `bin()` function
4. Remove the '0b' prefix that `bin()` adds
5. Return the binary string representation

The function handles the edge case where N=0 correctly (sum of digits is 0, binary representation is "0").
