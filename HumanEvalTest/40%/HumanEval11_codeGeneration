CodeGeneration:
Here's the implementation:

```python
from typing import List


def string_xor(a: str, b: str) -> str:
    """ Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """
    if len(a) != len(b):
        raise ValueError("Input strings must have the same length")
    
    result = []
    for i in range(len(a)):
        # XOR operation: 1 if bits are different, 0 if they are the same
        if a[i] != b[i]:
            result.append('1')
        else:
            result.append('0')
    
    return ''.join(result)
```

The function:
1. First validates that both strings have the same length
2. Iterates through each character position
3. Compares the bits at each position - if they're different, adds '1' to result, otherwise adds '0'
4. Joins the result list into a string and returns it

The XOR operation is implemented as: `1 if bits are different, 0 if they are the same` which matches the binary XOR truth table.
