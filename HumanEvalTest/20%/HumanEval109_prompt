
def move_one_ball(arr):
    """We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """

The following is chain of thought:
Let's break down the problem:

1. We are allowed to perform right shifts any number of times. Each right shift moves every element one step to the right, with the last element wrapping around to the front.
2. We need to check if there exists some number of right shifts (k) such that the array becomes sorted in non-decreasing order.
3. Since the array has unique elements, the sorted array is strictly increasing.

Observation:
- After k right shifts, the original array becomes: [arr[n-k], arr[n-k+1], ..., arr[n-1], arr[0], arr[1], ..., arr[n-k-1]]
- We are effectively rotating the array to the right by k. So the problem reduces to: can we rotate the array (right rotations) to make it sorted?

Alternate approach:
- Since the array has unique elements, we can first check if the array is already sorted. If yes, return True.
- Otherwise, we note that after rotations, the sorted array must be a cyclic shift of the original.
- How to check without trying all k (which would be O(n^2))?
- We can note that in the sorted rotated array, there should be exactly one drop (where the next element is smaller than the previous) because the array is unique and sorted. For example, in [3,4,5,1,2] the drop is between 5 and 1.
- So we can:
   a. If the array is already sorted: return T