20%CoT
CodeGeneration:
To implement the `unique` function, we can follow these key steps:

1. **Identify Unique Elements**: Utilize a data structure that inherently manages uniqueness. A set is a perfect choice because it automatically handles duplicates by storing only unique elements.

2. **Sort the Unique Elements**: Once we extract the unique elements using a set, we need to sort them in ascending order.

3. **Return as List**: Convert the sorted elements back into a list format.

Now, let's write the code for the `unique` function:

```python
def unique(l: list):
    """Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """
    # Step 1: Use a set to obtain unique elements from the list
    unique_elements = set(l)
    
    # Step 2: Sort the unique elements
    sorted_unique_elements = sorted(unique_elements)
    
    # Step 3: Return the sorted elements as a list
    return sorted_unique_elements
```

This function first converts the list into a set to filter out duplicate values. It then sorts the resulting set and returns it as a list, thereby achieving the goal of returning sorted unique elements from the input list.
