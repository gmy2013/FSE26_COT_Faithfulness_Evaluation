20%CoT
CodeGeneration:
- If the index is a multiple of 4 but not a multiple of 3: cube the value.
   - Otherwise: keep the value as is.
3. Sum all the processed values.

Let's implement this logic:

```python
def sum_squares(lst):
    """
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """
    total = 0
    
    for i, num in enumerate(lst):
        if i % 3 == 0:  # Multiple of 3
            total += num ** 2
        elif i % 4 == 0:  # Multiple of 4 but not 3
            total += num ** 3
        else:  # Not multiple of 3 or 4
            total += num
    
    return total
```

Let's test with the provided examples:
1. [1,2,3]: 
   - index 0 (multiple of 3): 1² = 1
   - index 1: 2
   - index 2: 3
   - Total: 1 + 2 + 3 = 6 ✓

2. []: Returns 0 ✓

3. [-1,-5,2,-1,-5]:
   - index 0 (multiple of 3): (-1)² = 1
   - index 1: -5
   - index 2: 2
   - index 3 (multiple of 3): (-1)² = 1
   - index 4 (multiple of 4 but not 3): (-5)³ = -125
   - Total: 1 + (-5) + 2 + 1 + (-125) = -126 ✓
