20%CoT
CodeGeneration:
ach digit.

Then, for each digit character, convert it back to an integer and check if it's even or odd. I can use modulo 2 for that.

I'll initialize two counters: one for even digits and one for odd digits.

Finally, return a tuple with the even count first, then the odd count.

Here's the implementation:

```python
def even_odd_count(num):
    """Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """
    num = abs(num)
    even_count = 0
    odd_count = 0
    
    for digit in str(num):
        num_digit = int(digit)
        if num_digit % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
            
    return (even_count, odd_count)
```
