20%CoT
CodeGeneration:
o iterate through each digit, convert each digit back to an integer, and sum them up.
2. **Convert the sum to binary**: Use Python's built-in `bin()` function to get the binary representation, which returns a string starting with '0b', so we need to slice that off.
3. **Return the binary string**: The output should be the binary string without the '0b' prefix.

Here is the implementation:

```python
def solve(N):
    """Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be "1".
        For N = 150, the sum of digits will be 6 the output should be "110".
        For N = 147, the sum of digits will be 12 the output should be "1100".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """
    # Calculate the sum of digits of N
    digit_sum = sum(int(d) for d in str(N))
    # Convert the sum to binary and remove the '0b' prefix
    binary_str = bin(digit_sum)[2:]
    return binary_str
```
