20%CoT
CodeGeneration:
To solve this problem, we need to generate Fibonacci numbers and check for prime numbers. Let's start by implementing helper functions to generate Fibonacci numbers and check for prime numbers.

```python
import math

def is_prime(num):
    """Check if a number is prime."""
    if num <= 1:
        return False
    if num <= 3:
        return True
    if num % 2 == 0 or num % 3 == 0:
        return False
    i = 5
    while i * i <= num:
        if num % i == 0 or num % (i + 2) == 0:
            return False
        i += 6
    return True

def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    """
    fibs = [0, 1]
    prime_fibs = []
    
    while len(prime_fibs) < n:
        next_fib = fibs[-1] + fibs[-2]
        fibs.append(next_fib)
        
        if is_prime(next_fib):
            prime_fibs.append(next_fib)
    
    return prime_fibs[-1]
