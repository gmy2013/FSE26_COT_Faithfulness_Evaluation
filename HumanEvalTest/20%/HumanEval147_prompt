
def get_max_triples(n):
    """
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """

The following is chain of thought:
Let's break down the problem step by step:

1. We need to generate an array `a` of length `n` where for each index `i` (1-indexed), `a[i] = i*i - i + 1`.
   Note: In code, we'll use 0-indexed indices, so for index `i` (0-indexed), the value corresponds to `(i+1)`.

2. We are to count the number of triples (i, j, k) with indices `i < j < k` such that `(a[i] + a[j] + a[k]) % 3 == 0`.

3. Instead of generating the entire array and then iterating over all possible triples (which would be O(n^3) and inefficient for large n),
   we can use a mathematical insight.

4. Let's analyze the value of `a[i]` modulo 3:
   For a given integer i (1-indexed), we have:
        a[i] = i*i - i + 1
   Compute this modulo 3:

   Consider the residues of i modulo 3:
   - If i ≡ 0 (mod 3): then i*i ≡ 0, -i ≡ 0, so a[i] ≡ 1 (mod 3)
   - If i ≡ 1 (mod 3): then i*i ≡ 1, -i ≡ -1 ≡ 2, so a[i] ≡ 1 + 2 + 1 = 4 ≡ 1 (mod 3)
   - If i ≡ 2 (mod 3): then i*i ≡ 4 ≡ 1, -i ≡ -2 ≡ 1, so a[i] ≡ 1 + 1 + 1 = 3 ≡ 0 (mod 3)

   So, for any i (1-indexed):
        if i % 3 != 2, then a[i] ≡ 1 (mod 3)
    