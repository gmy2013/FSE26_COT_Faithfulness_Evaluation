20%CoT
CodeGeneration:
izing Patterns**: The Fibonacci sequence starts as 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and so on. The nth Fibonacci number is defined as:
   - fib(0) = 0
   - fib(1) = 1
   - fib(n) = fib(n-1) + fib(n-2) for n > 1

3. **Approach**: To compute the nth Fibonacci number efficiently:
   - Use an iterative approach to avoid the excessive recursion overhead and redundant calculations associated with the naive recursive method.
   - Maintain a loop to calculate up to the nth Fibonacci number, using two variables to keep track of the last two numbers in the sequence.

4. **Implementation**: Implement the function iteratively with a loop.

Here's the implementation:

```python
def fib(n: int) -> int:
    """Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """
    if n == 0:
        return 0
    elif n == 1:
        return 1
    
    a, b = 0, 1  # Initialize the first two Fibonacci numbers
    for _ in range(2, n + 1):
        a, b = b, a + b  # Update to the next Fibonacci number
    
    return b
```

This function uses a simple loop to compute Fibonacci numbers efficiently in linear time with constant space.
